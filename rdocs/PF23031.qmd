---
title: "PF23031"
format: html
editor: visual
---

## Carregando Pacotes

```{r}
library("tidyverse")
library("dplyr")
library("openxlsx")
library("nortest")
library("FSA")
```

```{r, echo=FALSE}
cores_estat <- c('#A11D21','#003366', '#CC9900', '#663333','#FF6600','#CC9966','#999966','#006606','#008091', '#041835','#666666')
```

```{r}
theme_estat <- function (...) {
theme <- ggplot2::theme_bw() +
ggplot2::theme(
axis.title.y = ggplot2:: element_text(colour = "black",
size = 12),
axis.title.x = ggplot2:: element_text(colour = "black",
size = 12),
axis.text = ggplot2:: element_text(colour = "black", size
= 9.5),
panel.border = ggplot2:: element_blank() ,
axis.line = ggplot2:: element_line(colour = "black"),
legend.position = "top",
...
)
return (
list(
theme,
scale_fill_manual(values = cores_estat ),
scale_colour_manual(values = cores_estat )
)
)
}
```

## Carregando banco e fazendo alterações

```{r}
banco <- read.xlsx("ESTAT2.xlsx")
rep_supra <- read.xlsx("ESTAT2.xlsx", sheet = 2)
rep_infra <- read.xlsx("ESTAT2.xlsx", sheet = 3)
banco[banco == "*"] <- ""
banco[, -c(1, ncol(banco))] <- as.data.frame(lapply(banco[, -c(1, ncol(banco))], as.numeric))
```

## Testando normalidade

```{r}
# Assuming you have your data frame "banco" loaded

# Exclude the first and last columns
columns_to_test <- banco[, -c(1, ncol(banco))]

# Apply Shapiro-Wilk test to each column
shapiro_results <- lapply(columns_to_test, function(column) {
  shapiro_test <- shapiro.test(as.numeric(column))
  return(list(
    Column = names(column),
    W_Statistic = shapiro_test$statistic,
    P_Value = shapiro_test$p.value,
    Is_Normal = shapiro_test$p.value >= 0.05
  ))
})

# Display the results
results_df <- do.call(rbind, shapiro_results)
print(results_df)
```

## Dividindo os bancos

```{r}
supra <- filter(banco, Classe == "Supra")
infra <- filter(banco, Classe == "Infra")

```

```{r}
banco[, 2:8]
```

## Comparando Infra e supra

```{r}
ggplot(data = gather(banco, key = "músculo", value = "valor", c(2, 4, 6), -Classe)) +
  aes(x = Classe, y = valor, fill = Classe) +
  geom_boxplot(fill = c("#A11D21"), width = 0.5) +
  stat_summary(
    fun = "mean", geom = "point", shape = 23, size = 3, fill = "white"
  ) +
  labs(x = "Tipo de músculo ", y = "Amplitude") +
  theme_estat() +
   facet_wrap(~músculo, scales = "free_y", nrow = 1)
ggsave("box1.pdf", width = 158, height = 93, units = "mm")
```

```{r}
ggplot(data = gather(banco, key = "músculo", value = "valor", c(8, 10, 12), -Classe)) +
  aes(x = Classe, y = valor, fill = Classe) +
  geom_boxplot(fill = c("#A11D21"), width = 0.5) +
  stat_summary(
    fun = "mean", geom = "point", shape = 23, size = 3, fill = "white"
  ) +
  labs(x = "Tipo de músculo ", y = "Amplitude") +
  theme_estat() +
   facet_wrap(~músculo, scales = "free_y", nrow = 1)
ggsave("box2.pdf", width = 158, height = 93, units = "mm")
```
### SCMI

#### Amplitude
```{r}
wilcox.test(supra$SCMI_AMP, infra$SCMI_AMP, paired = T, correct = F)
```
```{r}
wilcox.test(supra$SCMI_AMP, infra$SCMI_AMP, paired = T, correct = F, alternative = "less")
```

o infra tem maior amplitude

```{r}
wilcox.test(supra$SCMI_LAT, infra$SCMI_LAT, paired = F, correct = F)
```

Os dois não são equivalentes quanto à latência

### SCMC
#### Amplitude
```{r}
wilcox.test(supra$SCMC_AMP, infra$SCMC_AMP, paired = T, correct = F)
```

Os dois são equivalentes quanto à amplitude

```{r}
wilcox.test(supra$SCMC_LAT, infra$SCMC_LAT, paired = F, correct = F)
```

Os dois são equivalentes quanto à latência

### TRAPi

#### Amplitude
```{r}
wilcox.test(supra$TRAPi_AMP, infra$TRAPi_AMP, paired = T, correct = F)
```

Os dois não são equivalentes quanto à amplitude

#### testando as variâncias

```{r}
var.test(supra$TRAPi_LAT, infra$TRAPi_LAT)
```

as variâncias são diferentes

#### testando as médias

```{r}
t.test(supra$TRAPi_LAT, infra$TRAPi_LAT, var.equal = F)
```

as médias de latência são equivalentes

### TRAPc

#### Amplitude
```{r}
wilcox.test(supra$TRAPc_AMP, infra$TRAPc_AMP, paired = T, correct = F)
```

Os dois são equivalentes quanto à amplitude

#### testando as variâncias

```{r}
var.test(supra$TRAPc_LAT, infra$TRAPc_LAT)
```

as variâncias são iguais

#### testando as médias

```{r}
t.test(supra$TRAPc_LAT, infra$TRAPc_LAT, var.equal = T)
```

as médias de latência são equivalentes

### SCi

#### Amplitude
```{r}
wilcox.test(supra$SCi_AMP, infra$SCi_AMP, paired = T, correct = F)
```

os dois não são equivalentes quanto à amplitude

#### testando as variâncias

```{r}
var.test(supra$SCi_LAT, infra$SCi_LAT)
```

as variâncias são iguais

#### testando as médias

```{r}
t.test(supra$SCi_LAT, infra$SCi_LAT, var.equal = T)
```

as médias de latência são equivalentes

### SCc

#### Amplitude
```{r}
wilcox.test(supra$SCc_AMP, infra$SCc_AMP, paired = T, correct = F)
```

```{r}
wilcox.test(supra$SCc_AMP, infra$SCc_AMP, paired = T, correct = F, alternative = "less")
```


os dois não são equivalentes quanto à amplitude

#### testando as variâncias

```{r}
var.test(supra$SCc_LAT, infra$SCc_LAT)
```

as variâncias são iguais

#### testando as médias

```{r}
t.test(supra$SCc_LAT, infra$SCc_LAT, var.equal = T)
```

os dois não são equivalentes quanto à latência

### Reprodutibilidade

```{r}
teste_infra <- matrix(0, nrow = nrow(infra), ncol = ncol(infra))
colnames(teste_infra) <- colnames(infra)
teste_infra[!is.na(infra)] <- "cheio"
teste_infra[is.na(infra)] <- "vazio"
teste_infra <- as.data.frame(teste_infra)
```

```{r}
teste_supra <- matrix(0, nrow = nrow(supra), ncol = ncol(supra))
colnames(teste_supra) <- colnames(supra)
teste_supra[!is.na(supra)] <- "cheio"
teste_supra[is.na(supra)] <- "vazio"
teste_supra <- as.data.frame(teste_supra)
```


```{r}
tabela_contingencia <- table(infra = c(teste_infra$SCMI_AMP, "vazio"), supra = c(teste_supra$SCMI_AMP, "vazio"))

# Adicione uma contagem de 0 para a combinação "vazio"-"vazio"
tabela_contingencia[,"vazio"][["vazio"]] <- 0

tabela_contingencia


```

#### SCMI

```{r}
mcnemar.test(matrix(c(rep_infra$SCMI_AMP, rep_supra$SCMI_AMP), nrow = 2))
```

```{r}
tabela_contingencia <- table(infra = c(teste_infra$SCMI_AMP, "vazio"), supra = c(teste_supra$SCMI_AMP, "vazio"))

# Adicione uma contagem de 0 para a combinação "vazio"-"vazio"
tabela_contingencia[,"vazio"][["vazio"]] <- 0
mcnemar.test(tabela_contingencia)
tabela_contingencia
```

#### SCMC

```{r}
mcnemar.test(matrix(c(rep_infra$SCMC_AMP, rep_supra$SCMC_AMP), nrow = 2))
```

```{r}
tabela_contingencia <- table(infra = teste_infra$SCMC_AMP, supra = teste_supra$SCMC_AMP)

mcnemar.test(tabela_contingencia)
tabela_contingencia
```

#### TRAPi
```{r}
mcnemar.test(matrix(c(rep_infra$TRAPi_AMP, rep_supra$TRAPi_AMP), nrow = 2))
```

```{r}
tabela_contingencia <- table(infra = teste_infra$TRAPi_AMP, supra = teste_supra$TRAPi_AMP)

mcnemar.test(tabela_contingencia)
tabela_contingencia
```
#### TRAPc

```{r}
tabela_contingencia <- table(infra = teste_infra$TRAPc_AMP, supra = teste_supra$TRAPc_AMP)

mcnemar.test(tabela_contingencia)
tabela_contingencia
```
#### SCi

```{r}
tabela_contingencia <- table(infra = teste_infra$SCi_AMP, supra = teste_supra$SCi_AMP)

mcnemar.test(tabela_contingencia)
tabela_contingencia
```

#### SCc

```{r}
tabela_contingencia <- table(infra = teste_infra$SCc_AMP, supra = teste_supra$SCc_AMP)

mcnemar.test(tabela_contingencia)
tabela_contingencia
```

### Gráficos de Proporção

```{r}
teste_banco <- matrix(0, nrow = nrow(banco), ncol = ncol(banco))
colnames(teste_banco) <- colnames(banco)
teste_banco[!is.na(banco[, 1:13])] <- "Resposta"
teste_banco[is.na(banco)] <- "Não resposta"
teste_banco <- as.data.frame(teste_banco)
teste_banco$Classe <- banco$Classe
```


```{r}
dados_empilhados <- gather(teste_banco, key = "músculo", value = "valor", c(2, 4, 6), -Classe)

# Crie um gráfico de colunas empilhadas das proporções de "cheio" e "vazio"
ggplot(data = dados_empilhados, aes(x = Classe, fill = valor)) +
  geom_bar(position = "fill") +
  labs(title = "Gráfico de Colunas Empilhadas de Proporções",
       x = "Classe",
       y = "Proporção") +
  theme_estat()+
  facet_wrap(~músculo, scales = "free_y", nrow = 1) +
  guides(fill = guide_legend(title = "Categoria"))
ggsave("col1.pdf", width = 158, height = 93, units = "mm")

```

```{r}
dados_empilhados <- gather(teste_banco, key = "músculo", value = "valor", c(8, 10, 12), -Classe)

# Crie um gráfico de colunas empilhadas das proporções de "cheio" e "vazio"
ggplot(data = dados_empilhados, aes(x = Classe, fill = valor)) +
  geom_bar(position = "fill") +
  labs(title = "Gráfico de Colunas Empilhadas de Proporções",
       x = "Classe",
       y = "Proporção") +
  theme_estat()+
  facet_wrap(~músculo, scales = "free_y", nrow = 1) +
  guides(fill = guide_legend(title = "Categoria"))
ggsave("col2.pdf", width = 158, height = 93, units = "mm")
```
